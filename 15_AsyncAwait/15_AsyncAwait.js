//15.	Задача на асинхронность: напишите асинхронную функцию, которая использует ключевое слово await
// для ожидания выполнения других асинхронных операций, и возвращает результат выполнения.

///Объявляем асинхронную функцию
//асинхронная функция всегда возвращает промис
async function AsyncAwait() {
  let promise;
  //перехватываем ошибки с помощью конструкции try..catch
  try {
    // await работает только внутри async–функций
    //Ключевое слово await заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await не выполнится.
    // После чего оно вернёт его результат, и выполнение кода продолжится.
    promise = await new Promise((resolve, reject) => {
      setTimeout(() => resolve("Результат!"), 3000);
    });
    console.log(promise);
    //возвращает результат выполнения
    return promise;
  } catch (e) {
    console.log(e);
  }
}
// Вызываем асинхронную функцию
AsyncAwait()
  //используем метод .then() для обработки результата асинхронной функции
  .then((r) => console.log("Результат выполнения асинхронной функции:", r))
  .catch((error) => {
    console.error("Обработка ошибки:", error);
  });
